import React from 'react';
import * as firebase from 'firebase'
import FileUploader from "react-firebase-file-uploader";

import { withAuthorization } from '../../../components/Session';
import { withFirebase } from '../../../components/Firebase'

class UploadFile extends React.Component {
	constructor(props) {
    super(props)
    this.state = {
      song: '',
	    songName: '',
			username: "",
      avatar: "",
      isUploading: false,
      progress: 0,
      avatarURL: ""
    }
    this.handleUpload = this.handleUpload.bind(this)
    // this.handlePlayPauseClick = this.handlePlayPauseClick.bind(this)
  }

	handleUpload(evt) {
		// const { firebase } = this.props;
		let file = evt.target.files[0]
		console.log({file})
		let musicRef = firebase.storage().ref('music/' + file.name)
    musicRef.put(file).then(() => {
			const storageRef = firebase.storage().ref('/music')
			
			// storageRef
			// .child(file.name)
			// .getMetadata
			// .then(metadata => console.log({metadata}))

      storageRef
        .child(file.name)
        .getDownloadURL()
        .then(url => {
					console.log({url})
					// this.setState({
					// 	song: url,
					// 	songName: file.name
					// })

					// let url = metaData.downloadURLs[0]
					// console.log({url})
          // const messageRef = firebase.database().ref('message')
          // messageRef.push({
          //   song: url,
          //   songName: file.name,
          // })
				})
    })
	}

	handleChangeUsername = event =>
	this.setState({ username: event.target.value });
handleUploadStart = () => this.setState({ isUploading: true, progress: 0 });
handleProgress = progress => this.setState({ progress });
handleUploadError = error => {
	this.setState({ isUploading: false });
	console.error(error);
};
handleUploadSuccess = filename => {
	this.setState({ avatar: filename, progress: 100, isUploading: false });
	firebase
		.storage()
		.ref("images")
		.child(filename)
		.getDownloadURL()
		.then(url => this.setState({ avatarURL: url }));
};

	render() {
		console.log('========+++>>>', this.props);
		const { songName, song } = this.state;
		return (
			<div>
				<h2>Upload an MP3 below!</h2>

				{/* <form>
          <label>Username:</label>
          <input
            type="text"
            value={this.state.username}
            name="username"
            onChange={this.handleChangeUsername}
          />
          <label>Avatar:</label>
          {this.state.isUploading && <p>Progress: {this.state.progress}</p>}
          {this.state.avatarURL && <img src={this.state.avatarURL} />}
          <FileUploader
            accept="image/*"
            name="avatar"
            randomizeFilename
            storageRef={firebase.storage().ref("images")}
            onUploadStart={this.handleUploadStart}
            onUploadError={this.handleUploadError}
            onUploadSuccess={this.handleUploadSuccess}
            onProgress={this.handleProgress}
          />
        </form> */}
	
				<div className="file-upload">
					<input
						onChange={this.handleUpload}
						name="song"
						type="file"
						placeholder="Choose an mp3"
					/>
				</div>

				<p>Now playing: {songName}</p>

				{/* <button id="play" onClick={this.handlePlayPauseClick}>
					▶ ❚❚
				</button> */}

				{/* <audio src={song} loop /> */}
				<audio src={song} title="Noir Désir" preload="auto" controls loop>
					<p>Votre navigateur est trop ancien pour lire ce fichier</p>
				</audio>

			</div>
		);
	}
}



const condition = authUser => !!authUser;
const withAuth = withAuthorization(condition)(UploadFile)

export default withFirebase(withAuth);